import threading
import time
import tkinter as tk
from pathlib import Path
from tkinter import ttk, messagebox
from typing import Dict, Any, Optional, Tuple
import cv2
import numpy as np
from PIL import Image, ImageTk, ImageOps


class FacialAuthSystem:
    def __init__(self) -> None:
        self.root = tk.Tk()
        self.root.title("Sistema de Autentica√ß√£o Avan√ßado")
        self.root.geometry("900x700")
        self.root.configure(bg='#2c3e50')
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)

        # Centralizar a janela na tela
        self.center_window()

        # Configurar estilo personalizado
        self.setup_custom_style()

        # Dados de usu√°rios
        self.users: Dict[str, Dict[str, Any]] = {
            "funcionario": {"password": "func123", "level": 0},
            "admin": {"password": "admin123", "level": 2},
            "user1": {"password": "senha1", "level": 1},
            "user2": {"password": "senha2", "level": 1}
        }

        # Vari√°veis para captura de v√≠deo
        self.cap: Optional[cv2.VideoCapture] = None
        self.capturing: bool = False
        self.current_frame: Optional[np.ndarray] = None
        self.video_thread: Optional[threading.Thread] = None

        # Carregar o classificador Haar Cascade
        cascade_path = Path(cv2.data.haarcascades) / 'haarcascade_frontalface_default.xml'
        self.face_cascade = cv2.CascadeClassifier(str(cascade_path))

        self.show_login_screen()

    def center_window(self) -> None:
        """Centraliza a janela na tela"""
        self.root.update_idletasks()
        width = 900
        height = 700
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')

    def setup_custom_style(self) -> None:
        """Configura estilos personalizados para a aplica√ß√£o"""
        style = ttk.Style()
        style.theme_use('clam')

        self.colors = {
            'primary': '#3498db',
            'secondary': '#2c3e50',
            'success': '#27ae60',
            'warning': '#f39c12',
            'danger': '#e74c3c',
            'light': '#ecf0f1',
            'dark': '#34495e',
            'background': '#2c3e50',
            'card_bg': '#34495e'
        }

        style.configure('Custom.TFrame', background=self.colors['background'])
        style.configure('Card.TFrame', background=self.colors['card_bg'], relief='raised', borderwidth=2)
        style.configure('Center.TFrame', background=self.colors['background'])

        style.configure('Primary.TButton',
                        background=self.colors['primary'],
                        foreground='white',
                        focuscolor='none',
                        borderwidth=0,
                        focusthickness=0,
                        padding=(20, 10))
        style.map('Primary.TButton',
                  background=[('active', '#2980b9'), ('pressed', '#21618c')])

        style.configure('Secondary.TButton',
                        background=self.colors['dark'],
                        foreground='white',
                        borderwidth=0,
                        padding=(15, 8))
        style.map('Secondary.TButton',
                  background=[('active', '#2c3e50'), ('pressed', '#1a252f')])

        style.configure('Title.TLabel',
                        background=self.colors['background'],
                        foreground=self.colors['light'],
                        font=('Arial', 20, 'bold'))

        style.configure('Subtitle.TLabel',
                        background=self.colors['background'],
                        foreground=self.colors['primary'],
                        font=('Arial', 14))

        style.configure('Normal.TLabel',
                        background=self.colors['card_bg'],
                        foreground=self.colors['light'],
                        font=('Arial', 11))

        style.configure('Custom.TEntry',
                        fieldbackground=self.colors['light'],
                        foreground=self.colors['dark'],
                        borderwidth=2,
                        focusthickness=2,
                        focuscolor=self.colors['primary'])

        style.configure('Custom.TLabelframe',
                        background=self.colors['background'],
                        foreground=self.colors['light'])
        style.configure('Custom.TLabelframe.Label',
                        background=self.colors['background'],
                        foreground=self.colors['primary'])

    def on_closing(self) -> None:
        """M√©todo chamado ao fechar a aplica√ß√£o"""
        self.capturing = False
        if self.cap and self.cap.isOpened():
            self.cap.release()
        self.root.destroy()

    def show_login_screen(self) -> None:
        """Exibe a tela de login principal com campos"""
        # Limpar a tela anterior
        for widget in self.root.winfo_children():
            widget.destroy()

        # Frame principal
        main_frame = ttk.Frame(self.root, style='Custom.TFrame', padding="40")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # Configurar pesos para centraliza√ß√£o
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.columnconfigure(2, weight=1)  # Coluna extra para centraliza√ß√£o
        main_frame.rowconfigure(0, weight=1)
        main_frame.rowconfigure(1, weight=0)  # Conte√∫do principal
        main_frame.rowconfigure(2, weight=1)
        main_frame.rowconfigure(3, weight=1)

        # T√≠tulo
        title_frame = ttk.Frame(main_frame, style='Custom.TFrame')
        title_frame.grid(row=0, column=0, columnspan=3, pady=(20, 10), sticky=(tk.W, tk.E))
        title_frame.columnconfigure(0, weight=1)

        ttk.Label(
            title_frame,
            text="üîê ",
            font=("Arial", 24),
            background=self.colors['background'],
            foreground=self.colors['primary']
        ).grid(row=0, column=0)

        ttk.Label(
            title_frame,
            text="Sistema de Autentica√ß√£o",
            style='Title.TLabel'
        ).grid(row=1, column=0, pady=5)

        ttk.Label(
            title_frame,
            text="Acesso Seguro",
            style='Subtitle.TLabel'
        ).grid(row=2, column=0, pady=5)

        # Container central para o card de login
        center_container = ttk.Frame(main_frame, style='Center.TFrame')
        center_container.grid(row=1, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), pady=20)
        center_container.columnconfigure(0, weight=1)

        # Card de login
        login_card = ttk.Frame(center_container, style='Card.TFrame', padding="30")
        login_card.grid(row=0, column=0, sticky=(tk.W, tk.E), padx=50)
        login_card.columnconfigure(0, weight=1)

        # Campo de login
        ttk.Label(
            login_card,
            text="Usu√°rio:",
            style='Normal.TLabel',
            font=('Arial', 12, 'bold')
        ).grid(row=0, column=0, sticky=tk.W, pady=(0, 10))

        self.login_entry = ttk.Entry(
            login_card,
            font=("Arial", 12),
            width=25,
            style='Custom.TEntry'
        )
        self.login_entry.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(0, 20))

        # Campo de senha
        ttk.Label(
            login_card,
            text="Senha:",
            style='Normal.TLabel',
            font=('Arial', 12, 'bold')
        ).grid(row=2, column=0, sticky=tk.W, pady=(0, 10))

        self.password_entry = ttk.Entry(
            login_card,
            font=("Arial", 12),
            show="‚Ä¢",
            width=25,
            style='Custom.TEntry'
        )
        self.password_entry.grid(row=3, column=0, sticky=(tk.W, tk.E), pady=(0, 30))

        # Bot√£o de autentica√ß√£o
        login_button = ttk.Button(
            login_card,
            text="üîì ENTRAR NO SISTEMA",
            command=self.standard_auth,
            style='Primary.TButton'
        )
        login_button.grid(row=4, column=0, sticky=(tk.W, tk.E), pady=10)

        # Container para informa√ß√µes (centralizado)
        info_container = ttk.Frame(main_frame, style='Center.TFrame')
        info_container.grid(row=2, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), pady=10)
        info_container.columnconfigure(0, weight=1)

        # Informa√ß√£o sobre n√≠veis de acesso
        info_frame = ttk.LabelFrame(
            info_container,
            text=" ‚ÑπÔ∏è  N√≠veis de Acesso",
            style='Custom.TLabelframe',
            padding="15"
        )
        info_frame.grid(row=0, column=0, sticky=(tk.W, tk.E))
        info_frame.columnconfigure(0, weight=1)

        levels_info = [
            ("üéØ N√≠vel 0 - Funcion√°rio", "Acesso b√°sico ao sistema"),
            ("üë§ N√≠vel 1 - Usu√°rio", "Acesso intermedi√°rio com mais recursos"),
            ("üëë N√≠vel 2 - Administrador", "Acesso completo + verifica√ß√£o facial")
        ]

        for i, (level, desc) in enumerate(levels_info):
            level_frame = ttk.Frame(info_frame, style='Custom.TFrame')
            level_frame.grid(row=i, column=0, sticky=(tk.W, tk.E), pady=5)

            ttk.Label(
                level_frame,
                text=level,
                style='Normal.TLabel',
                font=('Arial', 10, 'bold')
            ).pack(side=tk.LEFT, anchor='w')

            ttk.Label(
                level_frame,
                text=f" - {desc}",
                style='Normal.TLabel',
                font=('Arial', 10)
            ).pack(side=tk.LEFT, anchor='w')

        # Status
        status_container = ttk.Frame(main_frame, style='Center.TFrame')
        status_container.grid(row=3, column=1, sticky=(tk.W, tk.E), pady=10)
        status_container.columnconfigure(0, weight=1)

        self.status_label = ttk.Label(
            status_container,
            text="Digite suas credenciais para acessar o sistema",
            style='Normal.TLabel',
            foreground='#bdc3c7'
        )
        self.status_label.grid(row=0, column=0)

        # Focar no campo de login e configurar Enter para submeter
        self.login_entry.focus()
        self.password_entry.bind('<Return>', lambda event: self.standard_auth())

    def create_card(self, parent, title: str, content: list, row: int, column: int) -> None:
        """Cria um card estilizado para conte√∫do"""
        card = ttk.Frame(parent, style='Card.TFrame', padding="20")
        card.grid(row=row, column=column, padx=10, pady=10, sticky=(tk.W, tk.E, tk.N, tk.S))

        ttk.Label(
            card,
            text=title,
            style='Normal.TLabel',
            font=('Arial', 14, 'bold')
        ).grid(row=0, column=0, sticky=tk.W, pady=(0, 15))

        for i, item in enumerate(content, 1):
            ttk.Label(
                card,
                text=f"‚Ä¢ {item}",
                style='Normal.TLabel',
                font=('Arial', 11)
            ).grid(row=i, column=0, sticky=tk.W, pady=2)

        return card

    def standard_auth(self) -> None:
        """Realiza autentica√ß√£o com login e senha para todos os usu√°rios"""
        login = self.login_entry.get().strip()
        password = self.password_entry.get()

        if not login or not password:
            messagebox.showerror("Erro", "Por favor, preencha login e senha")
            return

        if login in self.users and self.users[login]["password"] == password:
            level = self.users[login]["level"]
            self.status_label.config(
                text=f"‚úÖ Autenticado como {login} - N√≠vel {level}",
                foreground=self.colors['success']
            )

            self.root.after(1000, lambda: self.redirect_after_auth(level, login))
        else:
            self.status_label.config(
                text="‚ùå Credenciais inv√°lidas - Tente novamente",
                foreground=self.colors['danger']
            )
            messagebox.showerror("Erro", "Credenciais inv√°lidas")

    def redirect_after_auth(self, level: int, username: str) -> None:
        """Redireciona ap√≥s autentica√ß√£o bem-sucedida"""
        if level == 0:
            self.show_level0_screen(username)
        elif level == 1:
            self.show_level1_screen(username)
        elif level == 2:
            self.start_facial_auth(username)

    def start_facial_auth(self, username: str) -> None:
        """Inicia o processo de autentica√ß√£o facial com c√¢mera"""
        # Tela de verifica√ß√£o facial
        for widget in self.root.winfo_children():
            widget.destroy()

        auth_frame = ttk.Frame(self.root, style='Custom.TFrame', padding="30")
        auth_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # Configurar grid para centraliza√ß√£o
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        auth_frame.columnconfigure(0, weight=1)
        auth_frame.columnconfigure(1, weight=1)
        auth_frame.columnconfigure(2, weight=1)
        auth_frame.rowconfigure(0, weight=0)  # Cabe√ßalho
        auth_frame.rowconfigure(1, weight=0)  # Subt√≠tulo
        auth_frame.rowconfigure(2, weight=1)  # C√¢mera
        auth_frame.rowconfigure(3, weight=0)  # Bot√µes

        # Cabe√ßalho
        header_frame = ttk.Frame(auth_frame, style='Custom.TFrame')
        header_frame.grid(row=0, column=1, pady=(0, 20), sticky=(tk.W, tk.E))
        header_frame.columnconfigure(0, weight=1)

        ttk.Label(
            header_frame,
            text="üëë ",
            font=("Arial", 24),
            background=self.colors['background'],
            foreground=self.colors['primary']
        ).grid(row=0, column=0)

        ttk.Label(
            header_frame,
            text=f"Verifica√ß√£o Facial - {username}",
            style='Title.TLabel'
        ).grid(row=1, column=0, pady=5)

        # Subt√≠tulo
        subtitle_frame = ttk.Frame(auth_frame, style='Custom.TFrame')
        subtitle_frame.grid(row=1, column=1, pady=(0, 20), sticky=(tk.W, tk.E))
        subtitle_frame.columnconfigure(0, weight=1)

        ttk.Label(
            subtitle_frame,
            text="üîí √öltima etapa: valida√ß√£o facial necess√°ria para acesso administrativo",
            style='Subtitle.TLabel'
        ).grid(row=0, column=0)

        # Container central para a c√¢mera
        camera_container = ttk.Frame(auth_frame, style='Custom.TFrame')
        camera_container.grid(row=2, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), pady=10)
        camera_container.columnconfigure(0, weight=1)
        camera_container.rowconfigure(0, weight=1)

        # Card da c√¢mera
        camera_card = ttk.Frame(camera_container, style='Card.TFrame', padding="15")
        camera_card.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        camera_card.columnconfigure(0, weight=1)
        camera_card.rowconfigure(0, weight=1)

        # √Årea de visualiza√ß√£o da c√¢mera
        self.camera_label = ttk.Label(
            camera_card,
            text="üé• Iniciando c√¢mera...\n\nAguardando ativa√ß√£o do dispositivo",
            background='#1a1a1a',
            foreground='white',
            font=('Arial', 12),
            justify=tk.CENTER
        )
        self.camera_label.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=50, pady=50)

        # Container central para bot√µes
        buttons_container = ttk.Frame(auth_frame, style='Custom.TFrame')
        buttons_container.grid(row=3, column=1, pady=20, sticky=(tk.W, tk.E))
        buttons_container.columnconfigure(0, weight=1)

        buttons_frame = ttk.Frame(buttons_container, style='Custom.TFrame')
        buttons_frame.grid(row=0, column=0)

        ttk.Button(
            buttons_frame,
            text="üì∑ Validar Rosto",
            command=self.validate_face,
            style='Primary.TButton'
        ).pack(side=tk.LEFT, padx=10)

        ttk.Button(
            buttons_frame,
            text="‚Ü©Ô∏è Voltar ao Login",
            command=self.show_login_screen,
            style='Secondary.TButton'
        ).pack(side=tk.LEFT, padx=10)

        # Iniciar c√¢mera
        self.capturing = True
        self.cap = cv2.VideoCapture(0)

        if not self.cap.isOpened():
            messagebox.showerror("Erro", "N√£o foi poss√≠vel acessar a c√¢mera")
            self.show_login_screen()
            return

        # Thread para captura de v√≠deo
        self.video_thread = threading.Thread(target=self.update_frame, daemon=True)
        self.video_thread.start()

    def update_frame(self) -> None:
        """Atualiza o frame da c√¢mera em tempo real"""
        while self.capturing:
            ret, frame = self.cap.read()
            if ret:
                try:
                    # Converter BGR para RGB
                    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

                    # Detectar rostos
                    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                    faces = self.face_cascade.detectMultiScale(gray, 1.1, 4)

                    # Desenhar ret√¢ngulos nos rostos detectados
                    for (x, y, w, h) in faces:
                        cv2.rectangle(frame_rgb, (x, y), (x + w, y + h), (0, 255, 0), 3)
                        cv2.putText(frame_rgb, 'Rosto Detectado', (x, y - 10),
                                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

                    # Armazenar frame atual para valida√ß√£o
                    self.current_frame = frame

                    # Redimensionar e converter para ImageTk
                    frame_rgb = cv2.resize(frame_rgb, (640, 480))
                    img = Image.fromarray(frame_rgb)
                    imgtk = ImageTk.PhotoImage(image=img)

                    # Atualizar a interface na thread principal
                    self.root.after(0, self.update_camera_label, imgtk)

                except Exception as e:
                    print(f"Erro ao processar frame: {e}")

            time.sleep(0.03)

    def update_camera_label(self, imgtk: ImageTk.PhotoImage) -> None:
        """Atualiza o label da c√¢mera (deve ser chamado na thread principal)"""
        self.camera_label.imgtk = imgtk
        self.camera_label.configure(image=imgtk)

    def validate_face(self) -> None:
        """Valida o rosto detectado"""
        if self.current_frame is None:
            messagebox.showerror("Erro", "Nenhuma imagem capturada")
            return

        try:
            # Converter para escala de cinza para detec√ß√£o
            gray = cv2.cvtColor(self.current_frame, cv2.COLOR_BGR2GRAY)
            faces = self.face_cascade.detectMultiScale(gray, 1.1, 4)

            if len(faces) > 0:
                # Atualizar interface para mostrar processamento
                self.camera_label.config(
                    text="üîç Processando verifica√ß√£o facial...\n\nAguarde...",
                    image=''
                )

                # Simular processo de valida√ß√£o
                self.root.after(2000, lambda: self.finish_face_validation(len(faces) > 0))
            else:
                messagebox.showerror("Erro", "Nenhum rosto detectado na imagem")

        except Exception as e:
            messagebox.showerror("Erro", f"Falha no processamento facial: {e}")

    def finish_face_validation(self, face_detected: bool) -> None:
        """Finaliza a valida√ß√£o facial"""
        if face_detected:
            success = np.random.random() > 0.2  # 80% de chance de sucesso

            if success:
                messagebox.showinfo("Sucesso", "‚úÖ Rosto validado com sucesso!")
                self.capturing = False
                if self.cap and self.cap.isOpened():
                    self.cap.release()
                self.show_admin_screen()
            else:
                messagebox.showerror("Falha", "‚ùå Falha na valida√ß√£o facial. Tente novamente.")
                # Restaurar a visualiza√ß√£o da c√¢mera
                self.capturing = True
                self.video_thread = threading.Thread(target=self.update_frame, daemon=True)
                self.video_thread.start()

    def show_level0_screen(self, username: str) -> None:
        """Exibe a tela de n√≠vel 0 (Funcion√°rio) com design moderno"""
        for widget in self.root.winfo_children():
            widget.destroy()

        main_frame = ttk.Frame(self.root, style='Custom.TFrame', padding="30")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.columnconfigure(2, weight=1)

        # Cabe√ßalho
        header_frame = ttk.Frame(main_frame, style='Custom.TFrame')
        header_frame.grid(row=0, column=1, pady=(0, 30), sticky=(tk.W, tk.E))
        header_frame.columnconfigure(0, weight=1)

        ttk.Label(
            header_frame,
            text="üéØ ",
            font=("Arial", 24),
            background=self.colors['background'],
            foreground=self.colors['primary']
        ).grid(row=0, column=0)

        ttk.Label(
            header_frame,
            text="Painel do Funcion√°rio",
            style='Title.TLabel'
        ).grid(row=1, column=0, pady=5)

        ttk.Label(
            header_frame,
            text=f"(N√≠vel 0) - {username}",
            style='Subtitle.TLabel'
        ).grid(row=2, column=0, pady=5)

        # Conte√∫do
        content_container = ttk.Frame(main_frame, style='Custom.TFrame')
        content_container.grid(row=1, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), pady=20)
        content_container.columnconfigure(0, weight=1)

        content_frame = ttk.Frame(content_container, style='Custom.TFrame')
        content_frame.grid(row=0, column=0, sticky=(tk.W, tk.E))
        content_frame.columnconfigure(0, weight=1)
        content_frame.columnconfigure(1, weight=1)

        recursos = [
            "Visualizar dados de entrada",
            "Consultar informa√ß√µes b√°sicas",
            "Acessar relat√≥rios simples",
            "Registrar ponto eletr√¥nico",
            "Visualizar calend√°rio corporativo",
            "Solicitar f√©rias"
        ]
        self.create_card(content_frame, "üìä Recursos Dispon√≠veis", recursos, 0, 0)

        # Card de informa√ß√µes
        info = [
            "Acesso b√°sico ao sistema",
            "Permiss√µes limitadas",
            "Hor√°rio comercial: 08:00-18:00",
            "Suporte: interno@empresa.com"
        ]
        self.create_card(content_frame, "‚ÑπÔ∏è Informa√ß√µes", info, 0, 1)

        # Bot√£o de sair
        button_container = ttk.Frame(main_frame, style='Custom.TFrame')
        button_container.grid(row=2, column=1, pady=30, sticky=(tk.W, tk.E))
        button_container.columnconfigure(0, weight=1)

        ttk.Button(
            button_container,
            text="üö™ Sair do Sistema",
            command=self.show_login_screen,
            style='Secondary.TButton'
        ).grid(row=0, column=0)

    def show_level1_screen(self, username: str) -> None:
        """Exibe a tela de n√≠vel 1 (Usu√°rio Autenticado)"""
        # Implementa√ß√£o similar ao n√≠vel 0
        for widget in self.root.winfo_children():
            widget.destroy()

        main_frame = ttk.Frame(self.root, style='Custom.TFrame', padding="30")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.columnconfigure(2, weight=1)

        # Cabe√ßalho
        header_frame = ttk.Frame(main_frame, style='Custom.TFrame')
        header_frame.grid(row=0, column=1, pady=(0, 30), sticky=(tk.W, tk.E))
        header_frame.columnconfigure(0, weight=1)

        ttk.Label(
            header_frame,
            text="üë§ ",
            font=("Arial", 24),
            background=self.colors['background'],
            foreground=self.colors['primary']
        ).grid(row=0, column=0)

        ttk.Label(
            header_frame,
            text="Painel do Usu√°rio",
            style='Title.TLabel'
        ).grid(row=1, column=0, pady=5)

        ttk.Label(
            header_frame,
            text=f"(N√≠vel 1) - {username}",
            style='Subtitle.TLabel'
        ).grid(row=2, column=0, pady=5)

        # Conte√∫do
        content_container = ttk.Frame(main_frame, style='Custom.TFrame')
        content_container.grid(row=1, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), pady=20)
        content_container.columnconfigure(0, weight=1)

        # Bot√£o
        button_container = ttk.Frame(main_frame, style='Custom.TFrame')
        button_container.grid(row=2, column=1, pady=30, sticky=(tk.W, tk.E))
        button_container.columnconfigure(0, weight=1)

        ttk.Button(
            button_container,
            text="üö™ Sair do Sistema",
            command=self.show_login_screen,
            style='Secondary.TButton'
        ).grid(row=0, column=0)

    def show_admin_screen(self) -> None:
        """Exibe a tela de n√≠vel 2 (Administrador)"""
        # Implementa√ß√£o similar
        for widget in self.root.winfo_children():
            widget.destroy()

        main_frame = ttk.Frame(self.root, style='Custom.TFrame', padding="30")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.columnconfigure(2, weight=1)

        header_frame = ttk.Frame(main_frame, style='Custom.TFrame')
        header_frame.grid(row=0, column=1, pady=(0, 30), sticky=(tk.W, tk.E))
        header_frame.columnconfigure(0, weight=1)

        ttk.Label(
            header_frame,
            text="üëë ",
            font=("Arial", 24),
            background=self.colors['background'],
            foreground=self.colors['primary']
        ).grid(row=0, column=0)

        ttk.Label(
            header_frame,
            text="Painel de Administra√ß√£o",
            style='Title.TLabel'
        ).grid(row=1, column=0, pady=5)

        ttk.Label(
            header_frame,
            text="(N√≠vel 2) - Acesso Completo",
            style='Subtitle.TLabel'
        ).grid(row=2, column=0, pady=5)

        button_container = ttk.Frame(main_frame, style='Custom.TFrame')
        button_container.grid(row=2, column=1, pady=30, sticky=(tk.W, tk.E))
        button_container.columnconfigure(0, weight=1)

        ttk.Button(
            button_container,
            text="üö™ Sair do Sistema",
            command=self.show_login_screen,
            style='Secondary.TButton'
        ).grid(row=0, column=0)

    def run(self) -> None:
        """Executa a aplica√ß√£o"""
        try:
            self.root.mainloop()
        finally:
            if self.cap and self.cap.isOpened():
                self.cap.release()


# Executar a aplica√ß√£o
if __name__ == "__main__":
    app = FacialAuthSystem()
    app.run()